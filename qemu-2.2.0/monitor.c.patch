--- monitor.c.orig	2014-12-31 12:02:26.978242279 -0800
+++ monitor.c	2014-12-31 19:03:11.782888672 -0800
@@ -1417,6 +1417,512 @@ static void do_physical_memory_dump(Moni
     memory_dump(mon, count, format, size, addr, 1);
 }
 
+/* We temporarily put hyperlink code here */
+
+#define BUFFER_SIZE 4096
+const char *proc_name0=NULL;
+const char *proc_name1=NULL;
+const char *proc_name2=NULL;
+
+long offset_of_name0 = -1;
+long offset_of_name0_align4 = -1;
+long offset_of_name0_least4 = -1;
+long offset_of_name1 = -1;
+long proc_offset_of_next;
+long offset_of_name;
+long offset_of_next;
+unsigned long offset_of_pid;
+
+long offset_of_name_in_task = -1;
+long offset_of_next_in_task = -1;
+long value_of_next0 = -1;
+long value_of_next1 = -1;
+
+unsigned int bits = 32; // We support both 32bits and 64bits.
+
+unsigned int is_linux = 0; // For linux 32bits os, we can have some optimizations, because kernel space starts from 0xc000 0000, therefore, we don't have to search from the begining.
+unsigned int is_win = 0; // For win 32bits os, we can have some optimizations, because kernel space starts from 0x8000 0000, therefore, we don't have to search from the begining.
+
+// We consider the linked list could be construted in two ways, either "next" points to "next", or "next" points to the start of the next structure.
+unsigned int next_to_next = 1;
+
+// Only for some rare cases, we need a second pass, for example, for FreeBSD 8.4 32bits.
+unsigned int second_pass = 0;
+
+// So far, we only know that Linux kernel 2.4 has such property, i.e., the task_struct is 4k-aligned.
+unsigned int task_4k_align=0;
+
+// Counts how many processes are there in the system.
+unsigned int print_counter = 0;
+
+int get_offsets_point_to_linkedlist(void);
+int get_offsets_point_to_task_struct(void);
+long get_offsets_second_pass(void);
+long get_offsets(void);
+void print_processes(void);
+
+/* Return 1 if find the 'next' pointer offset and set it to global variable 'proc_offset_of_next'
+ * Return 0 if not
+ */
+int get_offsets_point_to_linkedlist(void)
+{
+    long starting_addr = 0;
+    long addr1;
+    long addr2;
+    long addr_next = 0;
+
+    char* name_pos0 = NULL;
+    char* name_pos1 = NULL;
+    long read_counter0 = 0;
+    long read_counter1 = 0;
+    char ptr_next[4];
+    char buffer[BUFFER_SIZE];
+
+    if (is_linux == 1) { // For Linux 32bits, we do have this optimization, because kernel space starts from 0xc000 0000.
+        starting_addr = 0xc0000000;
+    }
+
+    if (is_win == 1) { // For Win 32bits, we do have this optimization, because kernel space starts from 0x8000 0000.
+        starting_addr = 0x80000000;
+    }
+    addr1 = addr2 = starting_addr;
+
+    CPUArchState *env;
+    env = mon_get_cpu();
+
+    while ( (addr1 + BUFFER_SIZE) < 0xffffffff) {
+        cpu_memory_rw_debug(ENV_GET_CPU(env), addr1, buffer, BUFFER_SIZE, 0);
+        // search for the name of first process, for Linux, it is "swapper", for Windows, it is "Idle".
+        name_pos0 = (char*) memmem(buffer, BUFFER_SIZE, proc_name0, strlen(proc_name0));
+        if (name_pos0 != NULL) {
+        /* Find first process's name string */
+
+            // offset (from the start of the dump file) of the name string.
+            offset_of_name0 = name_pos0 - buffer + starting_addr + read_counter0 * BUFFER_SIZE;
+            printf("Address for the first process name is: 0x%lx\n", offset_of_name0);
+            //continue;   // This line is crucial when we want to debug.
+
+            while ( (addr2 + BUFFER_SIZE) < 0xffffffff) {
+                cpu_memory_rw_debug(ENV_GET_CPU(env), addr2, buffer, BUFFER_SIZE, 0);
+                name_pos1 = (char*) memmem(buffer, BUFFER_SIZE, proc_name1, strlen(proc_name1));    // search for the name of the second process, for Linux, it is "init", for Windows, it is "System". 
+                if (name_pos1 != NULL) {
+                /* Find second process's name string */
+
+                    // offset (from the start of the dump file) of the second process's name string.
+                    offset_of_name1 = name_pos1 - buffer + starting_addr + read_counter1 * BUFFER_SIZE;
+                    printf("Address for the second process name is: 0x%lx\n", offset_of_name1);
+
+                    /* Search for the next pointer position.
+                     * Ranging from (offset of first process name - 1 page) to (offset of first process name + 1 page)
+                     * Find pointers in range points to the same offset of the second process name in memory
+                     */
+                    addr_next = offset_of_name0 - 0x400;
+
+                    int i;
+                    // assuming the "next" pointer is before or after the "name", but within 1 page distance.
+                    for(i = 0; i < 512; i++) {
+                        cpu_memory_rw_debug(ENV_GET_CPU(env), addr_next, ptr_next, 4, 0); // assume this is a pointer
+//                      printf("when i is %d, we assume this is the next pointer: 0x%x  ", i, (*(unsigned int*)ptr_next));
+//                      printf("And the next pointer of process 1 (right hand)  is at: 0x%lx\n", (offset_of_name1-0x400+i*4) );
+                        if ((*(unsigned int*)ptr_next) == offset_of_name1-0x400+i*4) {
+                            proc_offset_of_next = offset_of_name0+i*4-0x400;
+                            printf("Now we found the offset of the next pointer of the first process is 0x%lx\n", offset_of_name0+i*4-0x400);
+                            printf("And the address for the first process name is: 0x%lx\n", offset_of_name0);
+                            printf("And the address for the second process name is: 0x%lx\n", offset_of_name1);
+                            return 1;
+                        }
+                        addr_next = addr_next + 4;
+                    }
+
+                    addr_next = offset_of_name0 - 0x402;
+
+                    // assuming the "next" pointer is before or after the "name", but within 1 page distance.
+                    for(i = 0; i < 514; i++) {
+                        cpu_memory_rw_debug(ENV_GET_CPU(env), addr_next, ptr_next, 4, 0); // assume this is a pointer
+//                      printf("when i is %d, we assume this is the next pointer: 0x%x  ", i, (*(unsigned int*)ptr_next));
+//                      printf("And the next pointer of process 1 (right hand)  is at: 0x%lx\n", (offset_of_name1-0x402+i*4) );
+                        if ((*(unsigned int*)ptr_next) == offset_of_name1-0x402+i*4) {
+                            proc_offset_of_next = offset_of_name0+i*4-0x402;
+                            printf("Now we found the offset of the next pointer of the first process is 0x%lx\n", offset_of_name0+i*4-0x402);
+                            printf("And the address for the first process name is: 0x%lx\n", offset_of_name0);
+                            printf("And the address for the second process name is: 0x%lx\n", offset_of_name1);
+                            return 1;
+                        }
+                        addr_next = addr_next + 4;
+                    }
+                }  // Internal if Ends
+                addr2 = addr2 + BUFFER_SIZE;
+                read_counter1++;
+            }  // Internal while loop Ends
+            read_counter1 = 0; // reset read_counter1;
+            addr2 = starting_addr; // addr2 has to be set to the starting address, otherwise the internal loop will never run again.
+        }  // External if Ends
+        addr1 = addr1 + BUFFER_SIZE;
+        read_counter0++;
+    }  // External while loop Ends
+    return 0;
+}
+
+int get_offsets_point_to_task_struct(void)
+{
+    long starting_addr = 0;
+    long addr1;
+    long addr2;
+    long addr_next = 0;
+
+    char* name_pos0 = NULL;
+    char* name_pos1 = NULL;
+    long read_counter0 = 0;
+    long read_counter1 = 0;
+    char ptr_next[4];
+    char buffer[BUFFER_SIZE];
+
+    if (is_linux == 1) { // For Linux 32bits, we do have this optimization, because kernel space starts from 0xc0000000.
+        starting_addr = 0xc0000000;
+    }
+
+    if (is_win == 1) { // For Windows 32bits, we do have this optimization, because kernel space starts from 0x80000000.
+        starting_addr = 0x80000000;
+    }
+
+    addr1 = addr2 = starting_addr;
+
+    CPUArchState *env;
+    env = mon_get_cpu();
+
+    while ( (addr1 + BUFFER_SIZE) < 0xffffffff) {
+        /* read one page of contents and search for process name */
+        cpu_memory_rw_debug(ENV_GET_CPU(env), addr1, buffer, BUFFER_SIZE, 0);
+
+        // search for the name of first process, for Linux, it is "swapper", for Windows, it is "Idle"
+        name_pos0 = (char*) memmem(buffer, BUFFER_SIZE, proc_name0, strlen(proc_name0));
+
+        if (name_pos0 != NULL) {
+        /*  Find first process's name string */
+
+            // offset (from the start of the dump file) of the name string.
+            offset_of_name0 = name_pos0 - buffer + starting_addr + read_counter0 * BUFFER_SIZE;
+
+            // We need to clean the lower 4 bits, for Linux Kernel 2.4, the task_struct is 4K page align.
+            offset_of_name0_align4 = offset_of_name0 & 0xfffff000;
+
+            // We need to store the lower 4 bits
+            offset_of_name0_least4 = offset_of_name0 & 0xfff;
+            printf("Address for the first process's name is: 0x%lx\n", offset_of_name0);
+
+            //Read from the begining
+            while ( (addr2 + BUFFER_SIZE) < 0xffffffff) {
+                /* Read one page */
+                cpu_memory_rw_debug(ENV_GET_CPU(env), addr2, buffer, BUFFER_SIZE, 0);
+
+                // search for the name of the second process, for Linux, it is "init", for Windows, it is "System".
+                name_pos1 = (char*) memmem(buffer, BUFFER_SIZE, proc_name1, strlen(proc_name1));
+                if (name_pos1 != NULL) {
+                /* Find the second process's name */
+
+                    // offset (from the start of the dump file) of the second process's name string.
+                    offset_of_name1 = name_pos1 - buffer + starting_addr + read_counter1 * BUFFER_SIZE;
+                    printf("Address for the second process's name is: 0x%lx\n", offset_of_name1);
+                    /* Align offset to 4K for the next read */
+                    addr_next = offset_of_name0_align4;
+                    int i;
+                    /* Search for one page distance*/
+                    for(i = 0; i < 1024; i++) {
+                        // assume this is a pointer
+                        cpu_memory_rw_debug(ENV_GET_CPU(env), addr_next, ptr_next, 4, 0);
+
+                        /* Check if there is any pointer points to 4K-aligned offset of the second process' name */
+                        if ((*(unsigned int*) ptr_next) == (offset_of_name1 & 0xfffff000)) {
+                            proc_offset_of_next = offset_of_name0_align4+i*4;
+                            printf("Now we found the offset of the next pointer of the first process is 0x%lx\n", offset_of_name0_align4+i*4);
+                            printf("And the address for the first process name is: 0x%lx\n", offset_of_name0);
+                            printf("And the address for the second process name is: 0x%lx\n", offset_of_name1);
+                            return 1;
+                        }
+                        addr_next = addr_next + 4;
+                    }
+                }  // Internal if Ends
+                /* If not found, read the next page*/
+                addr2 = addr2 + BUFFER_SIZE;
+                read_counter1++;
+            }  // Internal while loop Ends
+            read_counter1 = 0;  // reset read_counter1;
+            addr2 = starting_addr;      // reset addr2 when the inner loop ends, so it starts from starting_addr the next time we start the inner loop.
+        }  // External if Ends
+        addr1 = addr1 + BUFFER_SIZE;
+        read_counter0++;
+    }  // External while loop Ends
+    return 0;
+}
+
+long get_offsets_second_pass(void)    // When "next" points to the start of the next structure, but the task_struct is _not_ 4k-aligned, this is true for FreeBSD 8.4.
+{
+    long starting_addr = 0;
+    long addr1;
+    long addr2;
+    long addr_next = 0;
+
+    long read_counter0 = 0;
+    long read_counter1 = 0;
+    char* name_pos0 = NULL;
+    char* name_pos1 = NULL;
+    char buffer[BUFFER_SIZE];
+    char ptr_next[4];
+    long found_next = 0;
+
+    addr1 = addr2 = starting_addr;
+
+    CPUArchState *env;
+    env = mon_get_cpu();
+
+    while ( (addr1 + BUFFER_SIZE) < 0xffffffff) {
+        /* read one page of contents and search for process name */
+        cpu_memory_rw_debug(ENV_GET_CPU(env), addr1, buffer, BUFFER_SIZE, 0);
+        name_pos0 = (char*) memmem(buffer, BUFFER_SIZE, proc_name0, strlen(proc_name0));    // search for the name of first process, for Linux, it is "swapper", for Windows, it is "Idle"
+        if (name_pos0 != NULL) {    // now we got the first process's name string
+            offset_of_name0 = name_pos0 - buffer + read_counter0 * BUFFER_SIZE;     // offset (from the start of the dump file) of the name string.
+            printf("So the address for the first process's name is: 0x%lx\n", offset_of_name0);
+
+            //Read from the begining
+            while ( (addr2 + BUFFER_SIZE) < 0xffffffff) {
+                /* Read one page */
+                cpu_memory_rw_debug(ENV_GET_CPU(env), addr2, buffer, BUFFER_SIZE, 0);
+                name_pos1 = (char*) memmem(buffer, BUFFER_SIZE, proc_name1, strlen(proc_name1));    // search for the name of the second process, for Linux, it is "init", for Windows, it is "System".
+                if (name_pos1 != NULL) {    // now we also got the second process's name string
+                    offset_of_name1 = name_pos1 - buffer + read_counter1 * BUFFER_SIZE;     // offset (from the start of the dump file) of the second process's name string.
+//                    if( (offset_of_name1 < offset_of_name0 - 4096) || (offset_of_name1 > offset_of_name0 + 4096) ) {   // FIXME: This is an optimization, based on my experience, for FreeBSD 32bits, the gap between offset_of_name0 and offset_of_name1 is usually less than 4096 bytes, but this might be wrong if we test more FreeBSD images.
+//                        read_counter1++;
+//                        continue;
+//                    }
+                    printf("So the address for the second process's name is: 0x%lx\n", offset_of_name1);
+
+                    addr_next = offset_of_name0-0x400; // FIXME: we use hardcode here, based on our experience, the gap between next to name is usually less than 1024 bytes, which is 0x400.
+                    int i;
+                    for(i=0;i<256;i++){    // assuming the "next" pointer is before or after the "name", but within 1 page distance.
+                        cpu_memory_rw_debug(ENV_GET_CPU(env), addr_next, ptr_next, 4, 0); // assume this is a pointer
+//                        printf("when i is %d, we assume this is the next pointer: 0x%x\n", i, (*(unsigned int*)ptr_next));
+//                        printf("So the least 4 bits of offset_of_name0 is: 0x%lx\n", offset_of_name0_least4);
+//                        long debug_right = offset_of_name1-4096-offset_of_name0_least4 +i*4;
+//                        printf("So the address for Windows process name 0 is: 0x%lx\n", offset_of_name0);
+//                        printf("So the address for Windows process name 1 is: 0x%lx\n", offset_of_name1);
+//                        printf("And the next pointer of process 1 (right hand)  is at: 0x%lx\n", debug_right);
+                        if ( ((*(unsigned int*)ptr_next) >= (offset_of_name1 - 0x400)) && ((*(unsigned int*)ptr_next) < offset_of_name1) ){    // Our experience is next is always in front of name.
+                            proc_offset_of_next = offset_of_name0 - 0x400 + i*4;
+                            value_of_next0 = (*(unsigned int*)ptr_next);
+                            printf("min is 0x%lx\n", offset_of_name1 - 0x400);
+                            printf("value_of_next0 is 0x%lx\n", value_of_next0);
+                            printf("max is 0x%lx\n", offset_of_name1 + 0x400);
+                            offset_of_name_in_task = offset_of_name1 - value_of_next0;
+                            if(proc_offset_of_next < (offset_of_name0 - offset_of_name_in_task)) {  // This does not make sense, i.e., when next is before the start of the structure.
+                                addr_next = addr_next + 4;  // But don't forget to increment addr_next, otherwise we will never go forward.
+                                continue;
+                            }
+                            offset_of_next_in_task = proc_offset_of_next - (offset_of_name0 - offset_of_name_in_task);
+                            printf("offset_of_name_in_task is 0x%lx\n", offset_of_name_in_task);
+                            printf("offset_of_next_in_task is 0x%lx\n", offset_of_next_in_task);
+                            cpu_memory_rw_debug(ENV_GET_CPU(env), value_of_next0+offset_of_next_in_task, ptr_next, 4, 0); // assume this is a pointer
+                            value_of_next1 = (*(unsigned int*)ptr_next);
+                            printf("value_of_next1 is 0x%lx\n", value_of_next1);
+                            cpu_memory_rw_debug(ENV_GET_CPU(env), value_of_next1+offset_of_name_in_task, buffer, strlen(proc_name2), 0); // assume this is a pointer
+                            printf("the buffer we read in is %s\n", buffer);
+                            printf("and proc_name2 is %s\n", proc_name2);
+                            if( strstr(buffer, proc_name2) != NULL ){
+                                found_next = 1;
+                                printf("Now we found the offset of the next pointer of the first process is 0x%lx\n", proc_offset_of_next);
+                                printf("And the address for the first process name is: 0x%lx\n", offset_of_name0);
+                                printf("And the address for the second process name is: 0x%lx\n", offset_of_name1);
+                                break; // jump out of the for loop
+                            }
+                        }
+                        addr_next = addr_next + 4;
+                    }
+                    if (found_next == 1)
+                        break;      // jump out of the inner while loop
+                }  // Internal if Ends
+                addr2 = addr2 + BUFFER_SIZE;
+                read_counter1++;
+            }  // Internal while loop Ends
+            read_counter1=0;        // reset read_counter1;
+            addr2 = starting_addr;      // reset addr2 when the inner loop ends, so it starts from starting_addr the next time we start the inner loop.
+            if (found_next == 1)
+                break;      // jump out of the outer while loop
+        }  // External if Ends
+        addr1 = addr1 + BUFFER_SIZE;
+        read_counter0++;
+    }  // External while loop Ends
+
+    if(found_next == 1){
+        offset_of_name_in_task = offset_of_name1 - value_of_next0;
+        offset_of_next_in_task = proc_offset_of_next - (offset_of_name0 - offset_of_name_in_task);
+        printf("offset_of_name_in_task is 0x%lx\n", offset_of_name_in_task);
+        printf("offset_of_next_in_task is 0x%lx\n", offset_of_next_in_task);
+        return 0;
+    }else{
+        return -1;      // we could not find the offsets to construct the linked list
+    }
+}
+
+long get_offsets(void)
+{
+    long found_next = 0;
+
+    if (next_to_next == 1) {
+    /* When "next" points to the "next" pointer, rather than the start of the next structure, this is true for Linux Kernel 2.6 as well as for Windows 7. */
+        found_next = get_offsets_point_to_linkedlist();
+    } else if (task_4k_align == 1) {
+    /* When "next" points to the start of the next structure, and the task_struct is 4k-aligned, this is true for Linux Kernel 2.4. */
+        found_next = get_offsets_point_to_task_struct();
+    }
+
+    if (found_next == 1) {
+        return 0;
+    } else {
+        second_pass = 1;
+        printf("===We need a second pass to get the offsets.===\n");
+        if (get_offsets_second_pass() == -1) {
+            return -1;  // we could not find the offsets to construct the linked list
+        } else {
+            return 0;
+        }
+    }
+    return -1;
+}
+
+void print_processes(void)
+{
+    char ptr_next[4];
+    char ptr_name[BUFFER_SIZE];
+    long next_pointer_value;
+
+    CPUArchState *env;
+    env = mon_get_cpu();
+
+    cpu_memory_rw_debug(ENV_GET_CPU(env), offset_of_name0, ptr_name, BUFFER_SIZE, 0);  // Get process 0 name.
+    printf("Name of the process is %s\n",ptr_name);     // print process 0 name
+    print_counter++;
+
+    cpu_memory_rw_debug(ENV_GET_CPU(env), offset_of_name1, ptr_name, BUFFER_SIZE, 0);  // Get process 1 name.
+    printf("Name of the process is %s\n",ptr_name);     // print process 1 name
+    print_counter++;
+
+//    printf("proc_offset_of_next is 0x%lx\n", proc_offset_of_next);
+//    printf("offset_of_name0_least4 is 0x%lx\n", offset_of_name0_least4);
+
+    if(next_to_next == 1){      // When "next" points to the "next" pointer, rather than the start of the next structure, this is true for Linux Kernel 2.6 as well as for Windows 7.
+        cpu_memory_rw_debug(ENV_GET_CPU(env), proc_offset_of_next, ptr_next, 4, 0);  // Get process 0, next pointer.
+        next_pointer_value=(*(unsigned int*)ptr_next);
+        while(1){
+            cpu_memory_rw_debug(ENV_GET_CPU(env), next_pointer_value, ptr_next, 4, 0);  // Get process 1, next pointer.
+            if( ((*(unsigned int*)ptr_next) == proc_offset_of_next) || ((*(unsigned int*)ptr_next) == 0) )      // If it points to the next pointer of the first process, we assume we have traversed all processes.
+                break;
+            next_pointer_value=(*(unsigned int*)ptr_next);
+            cpu_memory_rw_debug(ENV_GET_CPU(env), next_pointer_value-(proc_offset_of_next-offset_of_name0), ptr_name, BUFFER_SIZE, 0);  // process 2, name.
+            if(strlen(ptr_name) > 0)
+                printf("Name of the process is %s\n",ptr_name);
+            print_counter++;
+        }
+    }else{      // When "next" points to the start of the next structure, this is true for Linux Kernel 2.4 as well as FreeBSD 8.4.
+        cpu_memory_rw_debug(ENV_GET_CPU(env), proc_offset_of_next, ptr_next, 4, 0);  // Get process 0, next pointer.
+        next_pointer_value=(*(unsigned int*)ptr_next);
+//        printf("Value of next pointer is 0x%lx\n", next_pointer_value);
+        if(second_pass == 0){
+            while(1){
+                cpu_memory_rw_debug(ENV_GET_CPU(env), ( (next_pointer_value & 0xfffff000)+ (proc_offset_of_next & 0xfff) ), ptr_next, 4, 0);  // Get process 2, next pointer.
+                if( ((*(unsigned int*)ptr_next) == (proc_offset_of_next & 0xfffff000)) || ((*(unsigned int*)ptr_next) == 0) )   // If it points to the start address of the first process, we assume we have traversed all processes.
+                    break;
+                next_pointer_value=(*(unsigned int*)ptr_next);
+                cpu_memory_rw_debug(ENV_GET_CPU(env), next_pointer_value+offset_of_name0_least4, ptr_name, BUFFER_SIZE, 0);  // Get process 2, name.
+                if(strlen(ptr_name) > 0)
+                    printf("Name of the process is %s\n",ptr_name);
+                print_counter++;
+            }
+        }else{
+            while(1){
+                cpu_memory_rw_debug(ENV_GET_CPU(env), ( next_pointer_value + offset_of_next_in_task ), ptr_next, 4, 0);  // Get process 2, next pointer.
+                if( (*(unsigned int*)ptr_next) == (proc_offset_of_next - offset_of_next_in_task) || ((*(unsigned int*)ptr_next) == 0) ) // If it points to the start address of the first process, we assume we have traversed all processes.
+                    break;
+                next_pointer_value=(*(unsigned int*)ptr_next);
+//                printf("next_pointer_value is 0x%lx\n", next_pointer_value);
+                cpu_memory_rw_debug(ENV_GET_CPU(env), ( next_pointer_value+offset_of_name_in_task ), ptr_name, BUFFER_SIZE, 0);  // Get process 2, name.
+                if(strlen(ptr_name) > 0)
+                    printf("Name of the process is %s\n", ptr_name);
+                print_counter++;
+            }
+        }
+    }
+    printf("Total number of processes: %d\n", print_counter);
+    return;
+}
+
+static void hmp_ps(Monitor *mon, const QDict *qdict)
+{
+    monitor_printf(mon, "hello ps\n");
+    const char *os = qdict_get_str(qdict, "os");
+    if (strcmp(os, "linux") == 0) {
+        is_linux = 1;
+        proc_name0 = "swapper";
+        proc_name1 = "init";
+        monitor_printf(mon, "Okay, so we are dealing with Linux operating system.\n");
+    } else if (strcmp(os, "linux24") == 0) {
+        is_linux = 1;
+        proc_name0 = "swapper";
+        proc_name1 = "init";
+        task_4k_align = 1;
+        next_to_next = 0;
+        monitor_printf(mon, "Okay, so we are dealing with Linux 2.4 operating system.\n");
+    } else if (strcmp(os, "win") == 0) {
+        is_win = 1;
+        proc_name0 = "Idle";
+        proc_name1 = "System";
+        monitor_printf(mon, "Okay, so we are dealing with Windows operating system.\n");
+    } else if(strcmp(os, "win2000") == 0) {
+        is_win = 1;
+        proc_name0 = "System";
+        proc_name1 = "smss";
+        proc_name2 = "csrss";
+        monitor_printf(mon, "Okay, so we are dealing with Windows operating system, older than win 2000.\n");
+    } else if (strcmp(os, "freebsd") == 0) {
+//      proc_name0="kernel";
+//      proc_name0="audit";    // Note, this is an optimization, the first process is kernel, but there are too many "kernel" in the memory, which makes the program super slow.
+//      proc_name0="init";
+//      proc_name0="idle";
+        proc_name0 = "g_event";
+        proc_name1 = "g_up";
+        proc_name2 = "g_down";
+        next_to_next = 0;
+        second_pass = 1;
+        monitor_printf(mon, "Okay, so we are dealing with FreeBSD 8.x or older operating system.\n");
+    } else if (strcmp(os, "freebsd92") == 0) {
+        proc_name0 = "sctp_iterator";
+        proc_name1 = "xpt_thrd";
+        proc_name2 = "pagedaemon";
+// The following actually works but they are just too slow, because in memory there are too many audit, too many init, too many idle.
+//      proc_name0 = "audit";
+//      proc_name1 = "init";
+//      proc_name2 = "idle";
+
+//      proc_name0 = "intr";
+//      proc_name0 = "geom";
+//      proc_name0 = "yarrow";
+
+        next_to_next = 0;
+        second_pass = 1;
+        monitor_printf(mon, "Okay, so we are dealing with FreeBSD 9.x operating system.\n");
+    } else {
+        monitor_printf(mon, "Sorry, The operating system you typed is not supported.\n");
+        return;
+    }
+
+    monitor_printf(mon, "We are dealing with %s operating system.\n", os);
+    if (get_offsets() == -1) {
+        printf("Sorry we could not find the offsets to construct the linked list!\n");
+        return;
+    }
+    print_processes();
+}
+
+/* End of hyperlink code */
+
 static void do_print(Monitor *mon, const QDict *qdict)
 {
     int format = qdict_get_int(qdict, "format");
